class Solution(object):
    def twoSum(self, nums, target):
      
    # better solution
    # Here, we are taking a dictionary and if the new_target is not in the dictionary, 
    # we store the 'n' inside dictionary and save its index. If we find the new target in the dictioanry, we just simply return the index. 
        d = {}
        for i, n in enumerate(nums):
            new_target = target - n
            if new_target in d:
                return [d[new_target], i]
            else:
                d[n] = i
        
        # for i in range(0,len(nums)):
        #     new_number = target-nums[i]
        #     if(new_number in nums):
        #         index = nums.index(new_number)
        #         if(index !=i):
        #             return [index, i] 

        """
        :type nums: List[int]
        :type target: int
        :rtype: List[int]
        """
        
